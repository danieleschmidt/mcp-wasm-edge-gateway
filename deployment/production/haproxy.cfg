# HAProxy Configuration for MCP WASM Edge Gateway
# High availability load balancer with SSL termination

global
    log stdout local0
    chroot /var/lib/haproxy
    stats socket /run/haproxy/admin.sock mode 660 level admin
    stats timeout 30s
    user haproxy
    group haproxy
    daemon

    # Modern SSL configuration
    ssl-default-bind-ciphers ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-RSA-AES128-GCM-SHA256
    ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets
    ssl-default-server-ciphers ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-RSA-AES128-GCM-SHA256
    ssl-default-server-options ssl-min-ver TLSv1.2 no-tls-tickets

    # Performance tuning
    tune.ssl.default-dh-param 2048
    tune.bufsize 32768
    tune.maxrewrite 8192

defaults
    mode http
    log global
    option httplog
    option dontlognull
    option log-health-checks
    option forwardfor
    option http-server-close
    
    # Timeouts
    timeout connect 5000ms
    timeout client 50000ms
    timeout server 50000ms
    timeout http-keep-alive 10s
    timeout http-request 15s
    timeout queue 30s
    timeout check 3s
    
    # Error handling
    errorfile 400 /usr/local/etc/haproxy/errors/400.http
    errorfile 403 /usr/local/etc/haproxy/errors/403.http
    errorfile 408 /usr/local/etc/haproxy/errors/408.http
    errorfile 500 /usr/local/etc/haproxy/errors/500.http
    errorfile 502 /usr/local/etc/haproxy/errors/502.http
    errorfile 503 /usr/local/etc/haproxy/errors/503.http
    errorfile 504 /usr/local/etc/haproxy/errors/504.http

# Statistics and monitoring
frontend stats
    bind *:8404
    stats enable
    stats uri /stats
    stats refresh 30s
    stats admin if TRUE
    stats show-node
    stats show-legends
    stats show-desc "MCP WASM Edge Gateway Load Balancer"

# HTTP frontend (redirect to HTTPS)
frontend http_frontend
    bind *:80
    mode http
    
    # Security headers
    http-response set-header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
    http-response set-header X-Frame-Options "DENY"
    http-response set-header X-Content-Type-Options "nosniff"
    http-response set-header X-XSS-Protection "1; mode=block"
    http-response set-header Referrer-Policy "strict-origin-when-cross-origin"
    
    # Redirect HTTP to HTTPS
    redirect scheme https code 301 if !{ ssl_fc }

# HTTPS frontend
frontend https_frontend
    bind *:443 ssl crt /etc/ssl/certs/mcp-gateway.pem alpn h2,http/1.1
    mode http
    
    # Security headers
    http-response set-header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
    http-response set-header X-Frame-Options "DENY"
    http-response set-header X-Content-Type-Options "nosniff"
    http-response set-header X-XSS-Protection "1; mode=block"
    http-response set-header Referrer-Policy "strict-origin-when-cross-origin"
    http-response set-header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'"
    
    # Rate limiting
    stick-table type ip size 100k expire 30s store http_req_rate(10s)
    http-request track-sc0 src
    http-request deny if { sc_http_req_rate(0) gt 20 }
    
    # Request routing
    # Health checks
    acl is_health_check path_beg /health
    use_backend health_backend if is_health_check
    
    # Metrics endpoint
    acl is_metrics path_beg /metrics
    use_backend metrics_backend if is_metrics
    
    # API requests
    acl is_api path_beg /v1/ /api/
    use_backend mcp_api_backend if is_api
    
    # Default backend for all other requests
    default_backend mcp_api_backend
    
    # Request logging and monitoring
    capture request header Host len 32
    capture request header User-Agent len 64
    capture response header Content-Type len 32

# MCP API Backend
backend mcp_api_backend
    mode http
    balance roundrobin
    option httpchk GET /health
    
    # Health check configuration
    http-check expect status 200
    
    # Sticky sessions (if needed)
    # cookie SERVERID insert indirect nocache
    
    # Servers
    server mcp-gateway-1 mcp-gateway-1:8080 check inter 30s fall 3 rise 2 weight 100 maxconn 300
    server mcp-gateway-2 mcp-gateway-2:8080 check inter 30s fall 3 rise 2 weight 100 maxconn 300
    server mcp-gateway-3 mcp-gateway-3:8080 check inter 30s fall 3 rise 2 weight 100 maxconn 300
    
    # Connection settings
    option httpchk
    option forwardfor
    option httpclose
    
    # Timeout settings
    timeout server 30s
    timeout connect 5s

# Health check backend
backend health_backend
    mode http
    balance roundrobin
    option httpchk GET /health
    
    # All instances for health checks
    server mcp-gateway-1-health mcp-gateway-1:8081 check inter 10s fall 2 rise 1
    server mcp-gateway-2-health mcp-gateway-2:8082 check inter 10s fall 2 rise 1  
    server mcp-gateway-3-health mcp-gateway-3:8083 check inter 10s fall 2 rise 1

# Metrics backend
backend metrics_backend
    mode http
    balance roundrobin
    
    # Metrics endpoints
    server mcp-gateway-1-metrics mcp-gateway-1:9090 check inter 30s
    server mcp-gateway-2-metrics mcp-gateway-2:9091 check inter 30s
    server mcp-gateway-3-metrics mcp-gateway-3:9092 check inter 30s

# WebSocket support (if needed)
frontend websocket_frontend
    bind *:8443 ssl crt /etc/ssl/certs/mcp-gateway.pem
    mode http
    
    # WebSocket upgrade handling
    acl is_websocket hdr(Upgrade) -i websocket
    acl is_websocket_connection hdr_beg(Connection) -i upgrade
    use_backend websocket_backend if is_websocket is_websocket_connection
    
    default_backend mcp_api_backend

backend websocket_backend
    mode http
    balance source
    option httpchk GET /health
    
    # WebSocket specific settings
    timeout tunnel 3600s
    timeout server 3600s
    
    server mcp-gateway-1-ws mcp-gateway-1:8080 check inter 30s
    server mcp-gateway-2-ws mcp-gateway-2:8080 check inter 30s
    server mcp-gateway-3-ws mcp-gateway-3:8080 check inter 30s

# Emergency backend (maintenance mode)
backend emergency_backend
    mode http
    errorfile 503 /usr/local/etc/haproxy/errors/maintenance.http

# Monitoring and logging
listen prometheus_exporter
    bind *:9101
    mode http
    stats enable
    stats uri /metrics
    stats format prometheus
    option httplog

# Advanced configuration for high availability
backend mcp_api_backend
    mode http
    balance leastconn
    
    # Advanced health checking
    option httpchk GET /health HTTP/1.1\r\nHost:\ mcp-gateway\r\nUser-Agent:\ HAProxy-Health-Check
    http-check expect status 200
    http-check expect string "healthy"
    
    # Server configuration with advanced options
    server mcp-gateway-1 mcp-gateway-1:8080 check inter 10s fastinter 2s downinter 5s rise 2 fall 3 weight 100 maxconn 300 observe layer7 error-limit 10 on-error mark-down on-marked-down shutdown-sessions
    server mcp-gateway-2 mcp-gateway-2:8080 check inter 10s fastinter 2s downinter 5s rise 2 fall 3 weight 100 maxconn 300 observe layer7 error-limit 10 on-error mark-down on-marked-down shutdown-sessions
    server mcp-gateway-3 mcp-gateway-3:8080 check inter 10s fastinter 2s downinter 5s rise 2 fall 3 weight 100 maxconn 300 observe layer7 error-limit 10 on-error mark-down on-marked-down shutdown-sessions
    
    # Backup server (optional)
    # server mcp-backup backup-gateway:8080 check inter 30s backup
    
    # Connection pooling and keep-alive
    http-reuse aggressive
    
    # Request routing based on content
    # http-request set-header X-Backend-Server %s
    
    # Response compression
    compression algo gzip
    compression type text/html text/plain text/css application/javascript application/json

# Custom error pages
errorfile 503 /usr/local/etc/haproxy/errors/503-custom.http