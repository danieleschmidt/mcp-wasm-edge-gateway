name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run daily at 02:00 UTC
    - cron: '0 2 * * *'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUSTFLAGS: -Dwarnings

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Run cargo check
        run: cargo check --workspace --all-targets --all-features

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: check
    strategy:
      matrix:
        rust: [stable, beta]
        include:
          - rust: stable
            can-fail: false
          - rust: beta
            can-fail: true
    continue-on-error: ${{ matrix.can-fail }}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}

      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ matrix.rust }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libssl-dev libudev-dev pkg-config

      - name: Run cargo test
        run: cargo test --workspace --all-features

      - name: Run integration tests
        run: cargo test --test integration

  lint:
    name: Linting
    runs-on: ubuntu-latest
    needs: check
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-lint-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Run cargo fmt
        run: cargo fmt --all -- --check

      - name: Run cargo clippy
        run: cargo clippy --workspace --all-targets --all-features -- -D warnings

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run cargo audit
        run: cargo audit

      - name: Run cargo deny
        uses: EmbarkStudios/cargo-deny-action@v1

  wasm-build:
    name: WASM Build
    runs-on: ubuntu-latest
    needs: check
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-wasi, wasm32-unknown-unknown

      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-wasm-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build WASM for web
        run: wasm-pack build --target web --dev

      - name: Build WASM for Node.js
        run: wasm-pack build --target nodejs --dev --out-dir pkg-node

      - name: Check WASM size
        run: |
          ls -la pkg/*.wasm
          echo "WASM file size:"
          du -h pkg/*.wasm

      - name: Upload WASM artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wasm-build-${{ github.sha }}
          path: |
            pkg/
            pkg-node/

  cross-platform:
    name: Cross Platform Build
    runs-on: ${{ matrix.os }}
    needs: check
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable]
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: macos-latest
            target: x86_64-apple-darwin
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install system dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libssl-dev libudev-dev pkg-config

      - name: Build for target
        run: cargo build --target ${{ matrix.target }} --release

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.target }}-${{ github.sha }}
          path: target/${{ matrix.target }}/release/mcp-gateway*

  embedded-targets:
    name: Embedded Targets
    runs-on: ubuntu-latest
    needs: check
    strategy:
      matrix:
        target:
          - aarch64-unknown-linux-gnu
          - armv7-unknown-linux-gnueabihf
          - wasm32-wasi
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross
        run: cargo install cross

      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ matrix.target }}-cross-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build for embedded target
        run: cross build --target ${{ matrix.target }} --release

  performance:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-bench-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Run benchmarks
        run: cargo bench --workspace

      - name: Store benchmark results
        uses: benchmark-action/github-action-benchmark@v1
        with:
          name: Rust Benchmark
          tool: 'cargo'
          output-file-path: target/criterion/reports/index.html
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: true

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: llvm-tools-preview

      - name: Install cargo-llvm-cov
        run: cargo install cargo-llvm-cov

      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-coverage-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libssl-dev libudev-dev pkg-config

      - name: Generate code coverage
        run: cargo llvm-cov --workspace --codecov --output-path codecov.json

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: codecov.json
          fail_ci_if_error: true

  documentation:
    name: Documentation
    runs-on: ubuntu-latest
    needs: check
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-doc-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build documentation
        run: cargo doc --workspace --no-deps --document-private-items

      - name: Deploy documentation
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./target/doc

  final-check:
    name: Final Check
    runs-on: ubuntu-latest
    needs: [test, lint, security-audit, wasm-build, cross-platform, embedded-targets]
    if: always()
    steps:
      - name: Check job results
        run: |
          if [[ "${{ needs.test.result }}" != "success" ]]; then
            echo "Tests failed"
            exit 1
          fi
          if [[ "${{ needs.lint.result }}" != "success" ]]; then
            echo "Linting failed"
            exit 1
          fi
          if [[ "${{ needs.security-audit.result }}" != "success" ]]; then
            echo "Security audit failed"
            exit 1
          fi
          if [[ "${{ needs.wasm-build.result }}" != "success" ]]; then
            echo "WASM build failed"
            exit 1
          fi
          if [[ "${{ needs.cross-platform.result }}" != "success" ]]; then
            echo "Cross-platform build failed"
            exit 1
          fi
          if [[ "${{ needs.embedded-targets.result }}" != "success" ]]; then
            echo "Embedded targets build failed"
            exit 1
          fi
          echo "All checks passed!"

  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: final-check
    if: always() && github.event_name == 'push'
    steps:
      - name: Notify on success
        if: needs.final-check.result == 'success'
        run: echo "✅ CI pipeline completed successfully"

      - name: Notify on failure
        if: needs.final-check.result != 'success'
        run: echo "❌ CI pipeline failed"